#!/usr/bin/env sh
set -Eeuo pipefail;
test $(id -u) -eq 0 || { echo '- Must be root'; exit 1; };

export LC_ALL=C;

readonly FS_ROOT=${FS_ROOT:-/usr/local};
readonly EXEC_PATH=${FS_ROOT}/bin;

readonly ARCH=$(uname -m);
readonly LOG_FILE=$(mktemp /tmp/packagectl-XXXXXX.log);

readonly BUILD_USER=toolbox;
readonly BUILD_PATH=/var/lib/toolbox;

readonly TOOLBOX_PATH=/opt/toolbox;

readonly FORGE_SHELL=ipython;
readonly PIPX_PATH=${TOOLBOX_PATH}/pipx;
readonly MINIFORGE_PATH=${TOOLBOX_PATH}/miniforge;
readonly HOMEBREW_PATH=${TOOLBOX_PATH}/homebrew;

###################
###### pipx #######
###################

function pipx_check {
    command -v pipx >/dev/null;
}

function pipx_setup {
    aurman_install python-pipx >/dev/null;
}

function pipx_exec {
    local command=$@;

    export PIPX_HOME=${PIPX_PATH};
    export PIPX_BIN_DIR=${EXEC_PATH};
    pipx ${command} &> ${LOG_FILE};
}

function pipx_ensure {
    aurman_ensure;
    if ! pipx_check; then
        echo -n '> Configuring pipx manager...';
        pipx_setup;
        echo ' [OK]';
    fi
}

function pipx_install {
    local packages=$@;

    pipx_ensure;
    echo -n "> Setting ${packages}...";
    pipx_exec install ${packages} --force --pip-args='--no-cache-dir';
    echo ' [OK]';
}

function pipx_uninstall {
    local packages=$@;
    
    if pipx_check; then
        echo -n "> Unsetting ${packages}...";
        pipx_exec uninstall ${packages};
        echo ' [OK]';
    else
        echo '> No package installed';
    fi
}

function pipx_update {
    if pipx_check; then
        pipx_exec upgrade-all;
    fi
}

###################
#### miniforge ####
###################

function miniforge_check {
    test -d ${MINIFORGE_PATH} && test ! -z "$(ls -A ${MINIFORGE_PATH})">/dev/null;
}

function miniforge_setup {
    local install_file=$(mktemp /tmp/miniforge-install-XXXXXX.sh);

    curl -fsSL "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-$(uname -m).sh" > ${install_file};
    bash ${install_file} -ubp ${MINIFORGE_PATH} &> ${LOG_FILE};
    rm -f ${install_file};
}

function miniforge_exec {
    local command=$@;

    bash -c "
    set -Eeuo pipefail;
    source ${MINIFORGE_PATH}/etc/profile.d/conda.sh;
    ${command};
    conda clean -qy --all &>/dev/null;
    " &> ${LOG_FILE};
}

function miniforge_ensure {
    aurman_ensure;
    if ! miniforge_check; then
        echo -n '> Configuring miniforge manager...';
        miniforge_setup;
        echo ' [OK]';
    fi
}

function miniforge_install {
    local packages=$@;

    for package in ${packages}; do
        local environment="$(echo ${package} | cut -d':' -f1)";
        local targets="$(echo ${package} | cut -s -d':' -f2)";
        local environment_binaries="$(echo ${targets} | cut -s -d'/' -f1 | sed 's/,/ /g')";
        local environment_libraries="$(echo ${targets} | cut -d'/' -f2 | sed 's/,/ /g')";
	
	if [ -z "${environment_binaries}" ]; then
		pipx_ensure;
		local activation_command="exec ${FORGE_SHELL}_${environment} \$@";
		
		echo "! Building ${environment}...";
		pipx_exec install --suffix="_${environment}" ${FORGE_SHELL} --force --pip-args='--no-cache-dir';
		
		echo -n "${environment}> Setting ${environment_libraries}...";
		pipx_exec inject "${FORGE_SHELL}_${environment}" ${environment_libraries} --force --pip-args='--no-cache-dir';
		echo ' [OK]';
	else
		miniforge_ensure;
		local activation_command=". ${MINIFORGE_PATH}/etc/profile.d/conda.sh&&conda activate ${environment}&&exec ${FORGE_SHELL} \$@";

		echo "! Building ${environment}...";
		miniforge_exec conda create -qy --name ${environment};

        echo -n "${environment}> Setting ${environment_binaries}...";
        miniforge_exec conda install -qy --name ${environment} ${FORGE_SHELL} ${environment_binaries};
        echo ' [OK]';
		
		if [ -n "${environment_libraries}" ]; then
		    echo -n "${environment}> Setting ${environment_libraries}...";
		    miniforge_exec conda run --name ${environment} pip install --no-cache-dir ${environment_libraries};
		    echo ' [OK]';
		fi
	fi
	
	echo "${activation_command}" > ${EXEC_PATH}/${environment};
	chmod +x ${EXEC_PATH}/${environment};
    done
}

function miniforge_uninstall {
    local packages=$@;

    if miniforge_check; then
        for package in ${packages}; do
	    local environment="$(echo ${package} | cut -d':' -f1)";
	    
	    echo -n "> Destroying ${environment}...";
	    rm -f ${EXEC_PATH}/${environment};
	    if [ -d "${PIPX_HOME}/venvs/${FORGE_SHELL}_${environment}" ]; then
                pipx_exec uninstall ${FORGE_SHELL}_${environment};
	    else
                miniforge_exec conda remove --name ${environment} --all;
	    fi
	    echo ' [OK]';
        done
    else
        echo "> No environment created";
    fi
}

function miniforge_update {
    if miniforge_check; then
        miniforge_exec conda update --all;
	    pipx_exec upgrade-all --include-injected;
    fi
}

###################
##### homebrew ####
###################

function brew_check {
    command -v ${HOMEBREW_PATH}/bin/brew >/dev/null;
}

function brew_setup {
    mkdir -p ${HOMEBREW_PATH};
    aurman_install ruby2.6 git >/dev/null;
    curl -fsSL https://github.com/Homebrew/brew/tarball/master \
    | tar -zxf - -C ${HOMEBREW_PATH} --strip 1;

    chown -R ${BUILD_USER}:${BUILD_USER} ${HOMEBREW_PATH};
}

function brew_exec {
    local parameters=$@;

    rm -f ${EXEC_PATH}/brew;
    sudo -iu ${BUILD_USER} sh -c "
        set -Eeuo pipefail;
        export HOMEBREW_PREFIX=${HOMEBREW_PATH};
        export PATH=/opt/ruby2.6/bin:${HOMEBREW_PATH}/bin:\$PATH;
        ${HOMEBREW_PATH}/bin/brew \$(echo ${parameters} | sed 's/@latest//g') -q;
        rm -rf \$(${HOMEBREW_PATH}/bin/brew --cache) >/dev/null;
    " &> ${LOG_FILE};
}

function brew_ensure {
    aurman_ensure;
    if ! brew_check; then
        echo -n '> Configuring homebrew manager...';
        brew_setup;
        echo ' [OK]';
    fi;
}

function brew_install {
    local packages=$@;

    brew_ensure;
    echo -n "> Setting ${packages}...";
    brew_exec install ${packages};
    brew_exec link ${packages};
    ln -sf ${HOMEBREW_PATH}/bin/* ${EXEC_PATH};
    echo ' [OK]';
}

function brew_uninstall {
    local packages=$@;

    if brew_check; then
        echo -n "> Unsetting ${packages}...";
        brew_exec uninstall ${packages};
        echo ' [OK]';
    else
        echo '> No package installed';
    fi
}

function brew_update {
    if brew_check; then
        brew_exec update;
        brew_exec upgrade;
    fi
}

###################
##### aurman ######
###################

function aurman_check {
    command -v aurman >/dev/null;
}

function aurman_setup {
    pacman -Syu --noconfirm base-devel man &> ${LOG_FILE};

    id ${BUILD_USER} &> /dev/null || useradd -d "${BUILD_PATH}" -rm ${BUILD_USER};
    sed -i "s/# %wheel ALL=(ALL) NOPASSWD: ALL/%${BUILD_USER} ALL=(ALL) NOPASSWD: ALL/g" /etc/sudoers;

    sudo -iu ${BUILD_USER} sh -c '
        set -Eeuo pipefail;
        mkdir -p ${HOME}/aurman;
        curl -fsSL "https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=aurman" --output ${HOME}/aurman/PKGBUILD;
        cd ${HOME}/aurman && makepkg -si --noconfirm --skippgpcheck;
        rm -rf ${HOME}/aurman;
    ' &> ${LOG_FILE};
}

function aurman_exec {
    local parameters=$@;
    
    sudo -iu ${BUILD_USER} sh -c "
        set -Eeuo pipefail;
        mkdir -p ${BUILD_PATH}/.config/aurman;
        touch ${BUILD_PATH}/.config/aurman/aurman_config;
        echo 1 | aurman ${parameters} --noconfirm;
        aurman -Scc --noconfirm >/dev/null;
    " &> ${LOG_FILE};
}

function aurman_ensure {
    if ! aurman_check; then
        echo -n '> Configuring aurman manager...';
        aurman_setup;
        echo ' [OK]';
    fi
}

function aurman_install {
    local packages=$@;

    aurman_ensure;
    echo -n "> Setting ${packages}...";
    aurman_exec -S ${packages} --needed --skip_news --skip_new_locations --pgp_fetch --noedit;
    echo ' [OK]';
}

function aurman_uninstall {
    local packages=$@;

    if aurman_check; then
        echo -n "> Unsetting ${packages}...";
        aurman_exec -Rns ${packages};
        echo ' [OK]';
    else
        echo '> No package installed';
    fi
}

function aurman_update {
    if aurman_check; then
        aurman_exec -Syu --needed --skip_news --skip_new_locations --pgp_fetch --noedit;
    fi
}

function package_install {
    local packages=$@;

    local so_packages="";
    local brew_packages="";
    local miniforge_packages="";
    local python_packages="";
    for package in $(echo ${packages}); do
        case ${package} in
            *@*) brew_packages="${brew_packages} ${package}";;
            *:*) miniforge_packages="${miniforge_packages} ${package}";;
            *#python) python_packages="${python_packages} ${package%%#python}";;
            *) so_packages="${so_packages} ${package}";;
        esac
    done

    if [ -n "${so_packages}" ]; then
        aurman_install ${so_packages};
    fi

    if [ -n "${brew_packages}" ]; then
        brew_install ${brew_packages};
    fi

    if [ -n "${miniforge_packages}" ]; then
        miniforge_install ${miniforge_packages};
    fi

    if [ -n "${python_packages}" ]; then
        pipx_install ${python_packages};
    fi
}

function package_uninstall {
    local packages=$@;

    local so_packages="";
    local brew_packages="";
    local miniforge_packages="";
    local python_packages="";
    for package in $(echo ${packages}); do
        case ${package} in
            *@*) brew_packages="${brew_packages} ${package}";;
            *:*) miniforge_packages="${miniforge_packages} ${package}";;
            *#python) python_packages="${python_packages} ${package%%#python}";;
            *) so_packages="${so_packages} ${package}";;
        esac
    done

    if [ -n "${so_packages}" ]; then
        aurman_uninstall ${so_packages};
    fi

    if [ -n "${brew_packages}" ]; then
        brew_uninstall ${brew_packages};
    fi

    if [ -n "${miniforge_packages}" ]; then
        miniforge_uninstall ${miniforge_packages};
    fi

    if [ -n "${python_packages}" ]; then
        pipx_uninstall ${python_packages};
    fi
}

function package_update {
    echo -n "> Updating...";

    aurman_update;
    brew_update;
    miniforge_update;
    pipx_update;

    echo ' [OK]';
}

function package_pull {
    local layers=${@:-${LAYERS:-}};

    aurman_ensure;
    for layer in $(echo ${layers}); do
        local package_file=${FS_ROOT}/etc/pack.d/${layer};

        if [ ! -f ${package_file} ]; then
            echo "+ Pulling ${layer}...";
            curl -fsSL https://github.com/git-rafael/toolbox/tarball/master \
            | tar -zxvf - -C "${FS_ROOT}" --strip 3 --wildcards "**/layers/${layer}";
        fi

        local packages="";
        while read line; do
            local packages="${packages} ${line}";
        done < ${package_file};
        rm -f ${package_file};

        package_install ${packages};
    done
}

function usage {
    echo
    echo "Usage: $0 set|unset|update|pull <packages... >             "
    echo
}

function cleanup {
    local error_code=$?;

    trap - SIGINT SIGTERM ERR EXIT;
    if [ ${error_code} -ne 0 ]; then
        echo ' [FAILED]';
        cat ${LOG_FILE};
    fi
    rm -f ${LOG_FILE} &>/dev/null;

    exit ${error_code};
}

function fixes {
    chmod u+s /bin/ping;
    find ${EXEC_PATH} -xtype l -delete;
}

function main {
    trap cleanup SIGINT SIGTERM ERR EXIT;

    if [ -n "${LAYERS:-}" ]; then
        echo 'LAYERS environment set, starting auto pulling.';
        package_pull;
    else
        local command=${1:-};

        shift;
        case ${command} in
            set) package_install $@;;
            unset) package_uninstall $@;;
            update) package_update $@;;
            pull) package_pull $@;;
            *) usage && exit 1;;
        esac
    fi
};main $@;fixes;
